
Build bitcoin transactions
--------------------------
Usage: txtool [options] COMMAND [command parameters]

Options:
  -f, --file  Load/store transaction state to/from FILE  [required]


Theory of operation
-------------------
All operation revolves around an internal database, which is modified
via execution of a command operation:
	1. txtool reads transaction state file (JSON).
	2. txtool executes command given on command line,
	   updating transaction state.
	3. txtool writes transaction state file, overwriting
	   previous version.

"transaction state" is anything involving the given transaction being
built, examined or modified.

A session begins when a new database is initialized, using the "init"
command.


txtool command summary
----------------------

dump
	Inspect internal transaction state

help
	List this command summary

init
	Initialize new transaction state database

multisig N-REQUIRED KEY1 KEY2 KEY3...
	Begin new multi-sig tx

nreq N-REQUIRED
	Specific number of sigs required for a multisig tx

pubkey.get ADDRESS

	RPC: Obtain full pubkey, given bitcoin address (pubkey hash)

pubkeys KEY1 KEY2 KEY3...
	Add to list of pubkeys / bitcoin addresses

pubkeys.clear
	Clear list of pubkeys

raw SERIALIZED-TX
	Input serialized transaction from command line

raw.get TXID
	RPC: get raw transaction, given hash txid

raw.read FILE
	Input serialized transaction from file

raw.write FILE
	Output serialize transaction to file

raw.clear
	Clear serialized tx data

wallet.msig
	Commit in-memory multisig data (N-Required, Keys) to RPC wallet,
	returning a multisig payment address.

