#!/usr/bin/env node

var fs = require('fs');
var BitcoinRPC = require('./BitcoinRPC').class();
var rpc = new BitcoinRPC({
		'port' : 18332,
		'user' : 'user',
		'pass' : 'pass',
		'protocol' : 'http'
});

var argv = require('optimist')
	.usage('Build bitcoin transactions\nUsage: $0 [options] COMMAND [command parameters]')
	.alias('f', 'file')
	.describe('f', 'Load/store transaction state to/from JSON file')
	.demand(['f'])
	.argv
;

var datastore = {};

function list_commands()
{
	var s = "txtool command summary:\n";
	s += "dump\t\tInspect internal transaction state\n";
	s += "help\t\tList this command summary\n";
	s += "init\t\tInitialize new transaction state database\n";
	s += "multisig N-REQUIRED KEY1 KEY2 KEY3...\n\t\tBegin new multi-sig tx\n";
	s += "nreq N-REQUIRED\tSpecific number of sigs required for a multisig tx\n";
	s += "pubkey.get ADDRESS\n\t\tRPC: Lookup pubkey, given bitcoin address\n";
	s += "pubkeys KEY1 KEY2 KEY3...\n\t\tAdd to list of pubkeys / bitcoin addresses\n";
	s += "pubkeys.clear\tClear list of pubkeys\n";
	s += "raw SERIALIZED-TX\n\t\tInput serialized transaction from command line\n";
	s += "raw.get TXID\tGet raw tx, given hash txid\n";
	s += "raw.read FILE\tInput serialized transaction from file\n";
	s += "raw.write FILE\tOutput serialize transaction to file\n";
	s += "raw.clear\tClear serialized tx data\n";
	s += "wallet.msig\tCommit in-memory multisig data to RPC wallet,\n\t\treturning a multisig payment address.\n";
	console.log(s);
}

function write_datastore(callback)
{
	fs.writeFile(argv.file, JSON.stringify(datastore), callback);
}

function parse_nreq(idx)
{
	if (idx >= argv._.length) {
		throw new Error("N-Required argument missing");
	}

	var re = /^\d+$/;
	var arg = argv._[idx];
	if (!re.test(arg)) {
		throw new Error("Invalid N-Required argument");
	}

	var n_req = parseInt(arg, 10);
	if (n_req < 1 || n_req > 50) {
		throw new Error("Out of range N-Required arg");
	}

	datastore['n_required'] = n_req;
}

function parse_pubkeys(start_idx)
{
	// init 'pubkeys'
	if (datastore['pubkeys'] == undefined)
		datastore['pubkeys'] = [];

	// append to list of pubkeys
	for (var i = start_idx; i < argv._.length; i++) {
		datastore['pubkeys'].push(String(argv._[i]));
	}
}

function cmd_multisig()
{
	parse_nreq(1);

	datastore['pubkeys'] = [];	// clear, if not already
	parse_pubkeys(2);

	write_datastore(function(err) {});
}

function cmd_nreq()
{
	parse_nreq(1);
	write_datastore(function(err) {});
}

function pubkey_get_cb(err, resp)
{
	if (err) throw err;
	if (!resp['result']['pubkey'])
		throw new Error("Unable to obtain pubkey from RPC wallet");

	if (datastore['pubkeys'] == undefined)
		datastore['pubkeys'] = [];

	datastore['pubkeys'].push(String(resp['result']['pubkey']));
	write_datastore(function(err) {});
}

function cmd_pubkey_get(address)
{
	rpc.validateAddress(address, pubkey_get_cb);
}

function cmd_pubkeys()
{
	parse_pubkeys(1);
	write_datastore(function(err) {});
}

function cmd_inputs()
{
	if (datastore['inputs'] == undefined)
		datastore['inputs'] = [];

	for (var i = 1; i < argv._.length; i += 2) {
		var txid = String(argv._[i]);
		var vout = argv._[i + 1];
		var obj = {
			'txid' : txid,
			'vout' : vout
		};

		datastore['inputs'].push(obj);
	}

	write_datastore(function(err) {});
}

function cmd_outputs()
{
	if (datastore['outputs'] == undefined)
		datastore['outputs'] = {};

	for (var i = 1; i < argv._.length; i += 2) {
		var addr = String(argv._[i]);
		var value = argv._[i + 1];

		datastore['outputs'][addr] = value;
	}

	write_datastore(function(err) {});
}

function cmd_raw(in_str)
{
	var re = new RegExp('([\\da-fA-F]+)');
	in_str = String(in_str);
	var matches = in_str.match(re);
	if (matches == null)
		throw new Error("Hex transaction data not supplied");

	var hexstr = matches[1];
	datastore['raw'] = hexstr;

	write_datastore(function(err) {});
}

function raw_create_cb(err, resp)
{
	if (err) throw err;
	cmd_raw(resp['result']);
}

function cmd_raw_create()
{
	if (!datastore['inputs'] || !datastore['outputs'])
		throw new Error("missing inputs and/or outputs");

	rpc.createRawTransaction(datastore['inputs'], datastore['outputs'],
				 raw_create_cb);
}

function raw_get_cb(err, resp)
{
	if (err) throw err;
	cmd_raw(resp['result']);
}

function cmd_raw_get(txid)
{
	rpc.getRawTransaction(txid, raw_get_cb);
}

function raw_read_cb(err, data)
{
	if (err) throw err;
	cmd_raw(data);
}

function cmd_raw_read(filename)
{
	fs.readFile(filename, {'encoding':'utf8'}, raw_read_cb);
}

function raw_send_cb(err, resp)
{
	if (err) throw err;
	console.log(resp['result']);
}

function cmd_raw_send()
{
	if (!datastore['raw'])
		throw new Error("Missing raw transaction");

	rpc.sendRawTransaction(datastore['raw'], raw_send_cb);
}

function raw_sign_cb(err, resp)
{
	if (err) throw err;
	var result = resp['result'];
	var hexstr = result['hex'];
	var complete = result['complete'];

	console.log(complete ? "sigs:complete" : "sigs:partial");

	if (hexstr != datastore['raw']) {
		datastore['raw'] = hexstr;
		console.log("raw:updated");
		write_datastore(function(err) {});
	} else
		console.log("raw:unchanged");
}

function cmd_raw_sign()
{
	if (!datastore['raw'])
		throw new Error("Missing raw transaction");

	rpc.signRawTransaction(datastore['raw'], raw_sign_cb);
}

function cmd_raw_write(filename)
{
	if (datastore['raw'] == undefined)
		throw new Error("No raw transaction data stored in memory");
	
	fs.writeFile(filename, datastore['raw'], function(err) {});
}

function wallet_msig_cb(err, resp)
{
	if (err) throw err;
	console.log(resp['result']);
}

function cmd_wallet_msig()
{
	if (!datastore['n_required'] || !datastore['pubkeys'])
		throw new Error("Missing N-Required and/or pubkeys");

	rpc.addMultiSigAddress(datastore['n_required'], datastore['pubkeys'],
			       wallet_msig_cb);
}

function main()
{
	if (argv._.length == 0) {
		console.error("No command specified.");
		list_commands();
		return;
	}

	var cmd = argv._[0];
	
	if (cmd != 'init' && cmd != 'help') {
		try {
			datastore = JSON.parse(fs.readFileSync(argv.file));
		} catch(e) {
			console.error(argv.file, "must be a valid JSON file.  Run 'init' command to create a new one.");
			return;
		}
	}

	switch (cmd) {

	case "dump":
		console.dir(datastore);
		break;

	default:
		console.error("Unknown command", cmd);
		// fall through

	case "help":
		list_commands();
		return;
	
	case "init":
		write_datastore(function(err) {});
		break;
	
	case "inputs":
		cmd_inputs();
		break;
	case "inputs.clear":
		delete datastore['inputs'];
		write_datastore(function(err) {});
		break;

	case "multisig":
		cmd_multisig();
		break;
	
	case "nreq":
		cmd_nreq();
		break;

	case "outputs":
		cmd_outputs();
		break;
	case "outputs.clear":
		delete datastore['outputs'];
		write_datastore(function(err) {});
		break;

	case "pubkey.get":
		if (argv._.length < 2)
			throw new Error("Missing required address param");
		cmd_pubkey_get(argv._[1]);
		break;

	case "pubkeys":
		cmd_pubkeys();
		break;

	case "pubkeys.clear":
		delete datastore['pubkeys'];
		write_datastore(function(err) {});
		break;

	case "raw":
		if (argv._.length < 2)
			throw new Error("Missing required hex-string param");
		cmd_raw(argv._[1]);
		break;
	case "raw.clear":
		delete datastore['raw'];
		write_datastore(function(err) {});
		break;
	case "raw.create":
		cmd_raw_create();
		break;
	case "raw.get":
		if (argv._.length < 2)
			throw new Error("Missing required txid param");
		cmd_raw_get(argv._[1]);
		break;
	case "raw.read":
		if (argv._.length < 2)
			throw new Error("Missing required filename param");
		cmd_raw_read(argv._[1]);
		break;
	case "raw.send":
		cmd_raw_send();
		break;
	case "raw.sign":
		cmd_raw_sign();
		break;
	case "raw.write":
		if (argv._.length < 2)
			throw new Error("Missing required filename param");
		cmd_raw_write(argv._[1]);
		break;

	case "wallet.msig":
		cmd_wallet_msig();
		break;
	}
}

main();

